<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Finance Distribution</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/style.css">
    
</head>
<body>
    
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-center">Dynamic Bar Finance</h1>
        <a href="/home" class="btn btn-primary">Home</a>                       
    </div>   
    
    <!-- Month Filter -->
    <div class="filter-container">
        <button class="spin-button" id="prevMonth">◀</button>
        <select id="monthSelect">
            <% months.forEach(function(month){ %>
                <option value="<%= month %>"><%= month %></option>
            <% }); %>
        </select>
        <button class="spin-button" id="nextMonth">▶</button>
    </div>

    <!-- Chart Container -->
    <div style="width: 90vw; height: 80vh; margin: auto;">
        <canvas id="financeBarChart"></canvas>
    </div>

    <script>
        let financeBarChart = null;
        const availableMonths = <%- JSON.stringify(months) %>;

        // Initialize Chart
        function initChart(labels, sumProfit) {
            const ctx = document.getElementById('financeBarChart').getContext('2d');
            
            if (financeBarChart) {
                financeBarChart.destroy();
            }

            financeBarChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Profit Amount',
                        data: sumProfit,
                        backgroundColor: '#36A2EB',
                        borderColor: '#1E88E5',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            stacked: false,
                            title: {
                                display: true,
                                text: 'Category'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Amount'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false
                        }
                    }
                }
            });
        }

        // Fetch data for selected month
        async function updateChart(selectedMonth) {
            try {
                const response = await fetch(`/dynamic_bar_finance/data?month=${selectedMonth}`);
                const entries = await response.json();
                
                const labels = entries.map(entry => entry.Category);
                const sumProfit = entries.map(entry => entry.SumProfit);                

                initChart(labels, sumProfit);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        // Month navigation functions
        function changeMonth(step) {
            const currentIndex = availableMonths.indexOf(document.getElementById('monthSelect').value);
            let newIndex = currentIndex + step;
            
            if (newIndex < 0) newIndex = availableMonths.length - 1;
            if (newIndex >= availableMonths.length) newIndex = 0;
            
            const newMonth = availableMonths[newIndex];
            document.getElementById('monthSelect').value = newMonth;
            updateChart(newMonth);
        }

        // Event listeners
        document.getElementById('prevMonth').addEventListener('click', () => changeMonth(-1));
        document.getElementById('nextMonth').addEventListener('click', () => changeMonth(1));
        document.getElementById('monthSelect').addEventListener('change', (event) => {
            updateChart(event.target.value);
        });

        // Initial load
        window.onload = () => {
            const initialMonth = document.getElementById('monthSelect').value;
            updateChart(initialMonth);
        };
    </script>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Category Distribution</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/style.css">
    
</head>
<body>
    
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="text-center">Expense Category</h1>
        <a href="/home" class="btn btn-primary">Home</a>                       
    </div>   
    
    <!-- Account Filter -->
    <div class="filter-container">
        <button class="spin-button" id="prevAccount">◀</button>
        <select id="accountSelect">
            <% accounts.forEach(function(account){ %>
                <option value="<%= account %>"><%= account %></option>
            <% }); %>
        </select>
        <button class="spin-button" id="nextAccount">▶</button>
    </div>

    <!-- Chart Container -->
    <div style="width: 90vw; height: 80vh; margin: auto;">
        <canvas id="expenseCategoryChart"></canvas>
    </div>

    <script>
        let expenseCategoryChart = null;
        const availableAccounts = <%- JSON.stringify(accounts) %>;

        // Initialize Chart
        function initChart(months, debitData, creditData) {
            const ctx = document.getElementById('expenseCategoryChart').getContext('2d');
            
            if (expenseCategoryChart) {
                expenseCategoryChart.destroy();
            }

            expenseCategoryChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Debit Amount',
                        data: debitData,
                        backgroundColor: '#36A2EB',
                        borderColor: '#1E88E5',
                        borderWidth: 1
                    },
                    {
                        label: 'Credit Amount',
                        data: creditData,
                        backgroundColor: '#FFCE56',
                        borderColor: '#FFB300',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Months'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Amount'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false
                        }
                    }
                }
            });
        }

        // Fetch data for selected account
        async function updateChart(selectedAccount) {
            try {
                const response = await fetch(`/dynamic_bar_category/data?account=${encodeURIComponent(selectedAccount)}`);
                const entries = await response.json();
                
                const months = entries.map(entry => entry.month);
                const debitData = entries.map(entry => entry.DebitAmount);
                const creditData = entries.map(entry => entry.CreditAmount);

                initChart(months, debitData, creditData);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        // Account navigation functions
        function changeAccount(step) {
            const currentIndex = availableAccounts.indexOf(document.getElementById('accountSelect').value);
            let newIndex = currentIndex + step;
            
            if (newIndex < 0) newIndex = availableAccounts.length - 1;
            if (newIndex >= availableAccounts.length) newIndex = 0;
            
            const newAccount = availableAccounts[newIndex];
            document.getElementById('accountSelect').value = newAccount;
            updateChart(newAccount);
        }

        // Event listeners
        document.getElementById('prevAccount').addEventListener('click', () => changeAccount(-1));
        document.getElementById('nextAccount').addEventListener('click', () => changeAccount(1));
        document.getElementById('accountSelect').addEventListener('change', (event) => {
            updateChart(event.target.value);
        });

        // Initial load
        window.onload = () => {
            const initialAccount = document.getElementById('accountSelect').value;
            updateChart(initialAccount);
        };
    </script>
</body>
</html>